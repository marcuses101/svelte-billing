generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model SkaterType {
    code      String      @id
    Skater    Skater[]
    CoachRate CoachRate[]
}

enum EmailConfirmation {
    Pending
    Confirmed
    Invalid
}

enum EmailDeliveryStatus {
    NotSent
    Pending
    Rejected
    Delivered
}

model Skater {
    id          String    @id @default(uuid())
    firstName   String
    lastName    String
    dateOfBirth DateTime?

    userId String
    User   User   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accountId String  @unique
    Account   Account @relation(fields: [accountId], references: [id])

    skaterTypeCode String
    SkaterType     SkaterType @relation(fields: [skaterTypeCode], references: [code])

    SkaterLessons     SkaterLesson[]
    Invoices          SkaterInvoice[]
    AdditionalCharges SkaterInvoiceMiscellaneousItem[]

    @@unique([firstName, lastName])
}

model Role {
    name     String     @id @unique
    UserRole UserRole[]
}

model User {
    id                              String              @id @default(uuid())
    email                           String              @unique
    emailConfirmation               EmailConfirmation   @default(Pending)
    confirmationEmailDeliveryStatus EmailDeliveryStatus @default(NotSent)
    confirmationEmailMessageId      String?
    hashedPassword                  String?
    forcePasswordReset              Boolean             @default(true)
    hashedPasswordResetToken        String?
    passwordResetExpiry             DateTime?
    firstName                       String
    lastName                        String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    UserRoles UserRole[]
    Coach     Coach?
    Skater    Skater[]

    EmailConfirmationToken EmailConfirmationToken?
}

model UserRole {
    userId String
    user   User   @relation(fields: [userId], references: [id])

    roleName String
    Role     Role   @relation(fields: [roleName], references: [name])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, roleName])
}

model Coach {
    id                   String  @id @default(uuid())
    commissionPercentage Int
    isHstCharged         Boolean

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String @unique
    User   User   @relation(fields: [userId], references: [id])

    accountId String  @unique
    Account   Account @relation(fields: [accountId], references: [id])

    Lessons                        Lesson[]
    CoachPaySlips                  CoachPaySlip[]
    CoachRate                      CoachRate[]
    CoachPaySlipMiscellaneousItem  CoachPaySlipMiscellaneousItem[]
    SkaterInvoiceMiscellaneousItem SkaterInvoiceMiscellaneousItem[]
}

model CoachRate {
    hourlyRateInCents Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    coachId        String
    skaterTypeCode String

    Coach      Coach      @relation(fields: [coachId], references: [id])
    SkaterType SkaterType @relation(fields: [skaterTypeCode], references: [code])

    @@id([coachId, skaterTypeCode])
}

model Lesson {
    id                  String   @id @default(uuid())
    lessonTimeInMinutes Int
    date                DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    coachId String
    Coach   Coach  @relation(fields: [coachId], references: [id])

    SkaterLessons        SkaterLesson[]
    CoachPaySlipLineItem CoachPaySlipLineItem?
}

model EmailConfirmationToken {
    token String @id @default(uuid())

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SkaterInvoice {
    id                        String   @id @default(uuid())
    humanReadableId           Int      @default(autoincrement())
    invoiceDate               DateTime @db.Date
    amountDueInCents          Int
    chargesTotalInCents       Int
    outstandingBalanceInCents Int
    previousAmountDueInCents  Int
    hstAmountInCents          Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    skaterId       String
    invoiceBatchId String?

    emailDeliveryStatus EmailDeliveryStatus @default(NotSent)
    emailMessageId      String?

    previousInvoiceId String?        @unique
    PreviousInvoice   SkaterInvoice? @relation("InvoiceHistory", fields: [previousInvoiceId], references: [id])
    NextInvoice       SkaterInvoice? @relation("InvoiceHistory")

    Skater           Skater                  @relation(fields: [skaterId], references: [id])
    BillingBatch     BillingBatch?           @relation(fields: [invoiceBatchId], references: [id])
    InvoiceLineItems SkaterInvoiceLineItem[]

    InvoiceChargeAccountTransaction  AccountTransaction?  @relation("InvoiceCharge")
    SkaterPaymentAccountTransactions AccountTransaction[] @relation("SkaterPayment")
}

model SkaterInvoiceLineItem {
    id              String          @id @default(uuid())
    description     String
    amountInCents   Int
    transactionType TransactionType
    date            DateTime        @db.Date

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    invoiceId            String
    skaterLessonSkaterId String?
    skaterLessonLessonId String?

    SkaterInvoiceMiscellaneousItem SkaterInvoiceMiscellaneousItem?
    SkaterLesson                   SkaterLesson?                   @relation(fields: [skaterLessonSkaterId, skaterLessonLessonId], references: [skaterId, lessonId])
    Invoice                        SkaterInvoice                   @relation(fields: [invoiceId], references: [id])

    @@unique([skaterLessonSkaterId, skaterLessonLessonId])
}

// For competition fees or billing corrections
model SkaterInvoiceMiscellaneousItem {
    id              String          @id @default(uuid())
    description     String
    amountInCents   Int
    transactionType TransactionType // credit represents money the skater owes. debit represents payment or corrections
    date            DateTime        @db.Date

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    skaterId String
    Skater   Skater @relation(fields: [skaterId], references: [id])

    coachId String?
    Coach   Coach?  @relation(fields: [coachId], references: [id])

    skaterInvoiceLineItemId String?                @unique
    SkaterInvoiceLineItem   SkaterInvoiceLineItem? @relation(fields: [skaterInvoiceLineItemId], references: [id])
}

model CoachPaySlip {
    id                           String   @id @default(uuid())
    humanReadableId              Int      @default(autoincrement())
    date                         DateTime @default(now()) @db.Date
    amountDueInCents             Int
    previousPaySlipAmountInCents Int?
    chargesTotalInCents          Int
    outstandingBalanceInCents    Int
    commissionAmountInCents      Int
    commissionPercentage         Int
    coachRevenueInCents          Int
    hstAmountInCents             Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    emailDeliveryStatus EmailDeliveryStatus @default(NotSent)
    emailMessageId      String?

    coachId String
    Coach   Coach  @relation(fields: [coachId], references: [id])

    billingBatchId String?
    BillingBatch   BillingBatch? @relation(fields: [billingBatchId], references: [id])

    previousCoachPaySlipId String?       @unique
    PreviousCoachPaySlip   CoachPaySlip? @relation("CoachPaySlipHistory", fields: [previousCoachPaySlipId], references: [id])
    NextCoachPaySlip       CoachPaySlip? @relation("CoachPaySlipHistory")

    CoachPaySlipLineItems CoachPaySlipLineItem[]

    PaySlipChargeAccountTransaction AccountTransaction?  @relation("CoachPaySlipCharge")
    CoachPaymentAccountTransactions AccountTransaction[] @relation("CoachPayment")
}

// For competition fees or billing corrections
model CoachPaySlipMiscellaneousItem {
    id              String          @id @default(uuid())
    description     String
    amountInCents   Int
    transactionType TransactionType // debit represents money owed to the coach, credit represents money payed to the coach
    date            DateTime        @db.Date

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    coachId String
    Coach   Coach  @relation(fields: [coachId], references: [id])

    coachPaySlipLineItemId String?               @unique
    CoachPaySlipLineItem   CoachPaySlipLineItem? @relation(fields: [coachPaySlipLineItemId], references: [id])
}

model CoachPaySlipLineItem {
    id              String          @id @default(uuid())
    description     String
    amountInCents   Int
    transactionType TransactionType
    date            DateTime        @db.Date

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    coachPaySlipId String
    CoachPaySlip   CoachPaySlip @relation(fields: [coachPaySlipId], references: [id])

    lessonId                      String?                        @unique
    Lesson                        Lesson?                        @relation(fields: [lessonId], references: [id])
    CoachPaySlipMiscellaneousItem CoachPaySlipMiscellaneousItem?
}

model BillingBatch {
    id              String          @id @default(uuid())
    humanReadableId Int             @default(autoincrement())
    Invoices        SkaterInvoice[]
    CoachPaySlips   CoachPaySlip[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SkaterLesson {
    Skater           Skater                 @relation(fields: [skaterId], references: [id])
    skaterId         String
    Lesson           Lesson                 @relation(fields: [lessonId], references: [id])
    lessonId         String
    InvoiceLineItems SkaterInvoiceLineItem?

    @@id([skaterId, lessonId])
}

// Double Entry Bookkeeping 

enum TransactionType {
    Credit
    Debit
}

// Coach
// Skater
model AccountType {
    code String @id

    Account                Account[]
    AccountTransactionType AccountTransactionType[]
}

// Student Charge
// Student Payment
// Coach Charge
// Coach Pay
model AccountTransactionType {
    code            String          @id
    description     String
    type            TransactionType
    accountTypeCode String

    AccountType        AccountType          @relation(fields: [accountTypeCode], references: [code])
    AccountTransaction AccountTransaction[]
}

model Account {
    id              String @id @default(uuid())
    name            String
    accountTypeCode String

    AccountType        AccountType          @relation(fields: [accountTypeCode], references: [code])
    AccountTransaction AccountTransaction[]
    Skater             Skater?
    Coach              Coach?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, accountTypeCode])
}

model AccountTransaction {
    id                         String   @id @default(uuid())
    accountId                  String
    date                       DateTime @default(now())
    amountInCents              Int
    accountTransactionTypeCode String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    chargeInvoiceId String?        @unique
    InvoiceCharged  SkaterInvoice? @relation("InvoiceCharge", fields: [chargeInvoiceId], references: [id])

    paymentRecordedInvoiceId String?
    PaymentRecordedInvoice   SkaterInvoice? @relation("SkaterPayment", fields: [paymentRecordedInvoiceId], references: [id])

    coachPaySlipId String?       @unique
    CoachPaySlip   CoachPaySlip? @relation("CoachPaySlipCharge", fields: [coachPaySlipId], references: [id])

    coachPaymentPaySlipId String?
    CoachPaymentPaySlip   CoachPaySlip? @relation("CoachPayment", fields: [coachPaymentPaySlipId], references: [id])

    LedgerTransaction LedgerTransaction[]

    Account                Account                @relation(fields: [accountId], references: [id])
    AccountTransactionType AccountTransactionType @relation(fields: [accountTransactionTypeCode], references: [code])
}

model LedgerType {
    code                    String          @id
    positiveTransactionType TransactionType
    Ledgers                 Ledger[]
}

model Ledger {
    code           String @id
    name           String
    ledgerTypeCode String

    LedgerType         LedgerType          @relation(fields: [ledgerTypeCode], references: [code])
    CreditTransactions LedgerTransaction[] @relation("CreditLedger")
    DebitTransactions  LedgerTransaction[] @relation("DebitLedger")
}

model LedgerTransaction {
    id               String   @id @default(uuid())
    CreditLedger     Ledger   @relation("CreditLedger", fields: [creditLedgerCode], references: [code])
    DebitLedger      Ledger   @relation("DebitLedger", fields: [debitLedgerCode], references: [code])
    creditLedgerCode String
    debitLedgerCode  String
    date             DateTime @default(now())
    amountInCents    Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accountTransactionId String?

    AccountTrasaction AccountTransaction? @relation(fields: [accountTransactionId], references: [id])
}
