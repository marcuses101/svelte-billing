generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgresql://marcus:password@localhost:5432/svelte-billing"
}

// Define the Skater table
model Skater {
    id          String    @id @default(uuid())
    firstName   String
    lastName    String
    email       String
    dateOfBirth DateTime?
    createdOn   DateTime  @default(now())
    modifiedOn  DateTime?

    accountId String @unique

    SkaterLessons     SkaterLesson[]
    Invoices          Invoice[]
    Account           Account            @relation(fields: [accountId], references: [id])
    AdditionalCharges AdditionalCharge[]

    @@unique([firstName, lastName])
}

model Role {
    name     String     @id @unique
    UserRole UserRole[]
}

// Define the User table
model User {
    id        String  @id @default(uuid())
    email     String  @unique
    firstName String?
    lastName  String?

    UserRoles UserRole[]
    Coach     Coach?

    // CreatedInvoices Invoice[] @relation("CreatorUser")
    // UpdatedInvoices Invoice[] @relation("ModifierUser")
}

model UserRole {
    userId String
    user   User   @relation(fields: [userId], references: [id])

    roleName String
    Role     Role   @relation(fields: [roleName], references: [name])

    @@id([userId, roleName])
}

model Coach {
    id                   String @id @default(uuid())
    hourlyRateInCents    Int
    commissionPercentage Int

    userId String @unique
    User   User   @relation(fields: [userId], references: [id])

    accountId String  @unique
    Account   Account @relation(fields: [accountId], references: [id])

    Lessons             Lesson[]
    CoachPayrollRecords CoachPaySlip[]
}

model Lesson {
    id                         String    @id @default(uuid())
    lessonTimeInMinutes        Int
    lessonCostInCents          Int
    lessonCostPerSkaterInCents Int
    date                       DateTime
    createdOn                  DateTime  @default(now())
    modifiedOn                 DateTime?

    coachId String
    Coach   Coach  @relation(fields: [coachId], references: [id])

    SkaterLessons        SkaterLesson[]
    CoachPaySlipLineItem CoachPaySlipLineItem?
}

// used for additional charges such as competition fees
model AdditionalCharge {
    id            String   @id @default(uuid())
    description   String
    amountInCents Int
    date          DateTime @db.Date

    skaterId String
    Skater   Skater @relation(fields: [skaterId], references: [id])

    invoiceLineItemId String?          @unique
    InvoiceLineItem   InvoiceLineItem? @relation(fields: [invoiceLineItemId], references: [id])
}

model Invoice {
    id                        String   @id @default(uuid())
    invoiceDate               DateTime @db.Date
    amountDueInCents          Int
    chargesTotalInCents       Int
    outstandingBalanceInCents Int
    previousAmountDueInCents  Int

    // createdon        datetime  @default(now())
    // createdbyuserid  string
    // createdbyuser    user      @relation("creatoruser", fields: [createdbyuserid], references: [id])
    // modifiedon       datetime?
    // modifiedbyuserid string?
    // modifiedbyuser   user?     @relation("modifieruser", fields: [modifiedbyuserid], references: [id])

    skaterId          String
    invoiceBatchId    String?
    previousInvoiceId String? @unique

    PreviousInvoice Invoice? @relation("InvoiceHistory", fields: [previousInvoiceId], references: [id])
    NextInvoice     Invoice? @relation("InvoiceHistory")

    Skater                           Skater               @relation(fields: [skaterId], references: [id])
    BillingBatch                     BillingBatch?        @relation(fields: [invoiceBatchId], references: [id])
    InvoiceLineItems                 InvoiceLineItem[]
    InvoiceChargeAccountTransaction  AccountTransaction?  @relation("InvoiceCharge")
    SkaterPaymentAccountTransactions AccountTransaction[] @relation("SkaterPayment")
}

model InvoiceLineItem {
    id            String   @id @default(uuid())
    description   String
    amountInCents Int
    date          DateTime @db.Date

    invoiceId            String
    skaterLessonSkaterId String?
    skaterLessonLessonId String?

    AdditionalChage AdditionalCharge?
    SkaterLesson    SkaterLesson?     @relation(fields: [skaterLessonSkaterId, skaterLessonLessonId], references: [skaterId, lessonId])
    Invoice         Invoice           @relation(fields: [invoiceId], references: [id])

    @@unique([skaterLessonSkaterId, skaterLessonLessonId])
}

model CoachPaySlip {
    id      String @id @default(uuid())
    Coach   Coach  @relation(fields: [coachId], references: [id])
    coachId String

    CoachPayrollLineItems CoachPaySlipLineItem[]
    AccountTransaction    AccountTransaction?
}

model CoachPaySlipLineItem {
    id                   String   @id @default(uuid())
    description          String
    amountInCents        Int
    date                 DateTime @db.Date
    coachPayrollRecordId String

    lessonId String @unique

    Lesson       Lesson       @relation(fields: [lessonId], references: [id])
    CoachPaySlip CoachPaySlip @relation(fields: [coachPayrollRecordId], references: [id])
}

model BillingBatch {
    id        String    @id @default(uuid())
    Invoices  Invoice[]
    createdOn DateTime  @default(now())
}

model SkaterLesson {
    Skater           Skater           @relation(fields: [skaterId], references: [id])
    skaterId         String
    Lesson           Lesson           @relation(fields: [lessonId], references: [id])
    lessonId         String
    InvoiceLineItems InvoiceLineItem?

    @@id([skaterId, lessonId])
}

// Double Entry Bookkeeping 

enum TransactionType {
    Credit
    Debit
}

// Coach
// Skater
model AccountType {
    code String @id

    Account                Account[]
    AccountTransactionType AccountTransactionType[]
}

// Student Charge
// Student Payment
// Coach Charge
// Coach Pay
model AccountTransactionType {
    code            String          @id
    description     String
    type            TransactionType
    accountTypeCode String

    AccountType        AccountType          @relation(fields: [accountTypeCode], references: [code])
    AccountTransaction AccountTransaction[]
}

model Account {
    id              String @id @default(uuid())
    name            String
    accountTypeCode String

    AccountType        AccountType          @relation(fields: [accountTypeCode], references: [code])
    AccountTransaction AccountTransaction[]
    Skater             Skater?
    Coach              Coach?

    @@unique([name, accountTypeCode])
}

// maybe account transactions should have an associated ledger transaction. Could be optional? TBD
model AccountTransaction {
    id                         String   @id @default(uuid())
    accountId                  String
    date                       DateTime @default(now())
    amountInCents              Int
    accountTransactionTypeCode String

    ledgerTransactionId      String? @unique
    chargeInvoiceId          String? @unique
    paymentRecordedInvoiceId String? @unique
    paymentInvoiceId         String? @unique
    coachPaySlipId           String? @unique

    InvoiceCharged         Invoice?           @relation("InvoiceCharge", fields: [chargeInvoiceId], references: [id])
    PaymentRecordedInvoice Invoice?           @relation("SkaterPayment", fields: [paymentRecordedInvoiceId], references: [id])
    CoachPaySlip           CoachPaySlip?      @relation(fields: [coachPaySlipId], references: [id])
    LedgerTransaction      LedgerTransaction?

    Account                Account                @relation(fields: [accountId], references: [id])
    AccountTransactionType AccountTransactionType @relation(fields: [accountTransactionTypeCode], references: [code])
}

model LedgerType {
    code                    String          @id
    positiveTransactionType TransactionType
    Ledgers                 Ledger[]
}

model Ledger {
    code           String @id
    name           String
    ledgerTypeCode String

    LedgerType         LedgerType          @relation(fields: [ledgerTypeCode], references: [code])
    CreditTransactions LedgerTransaction[] @relation("CreditLedger")
    DebitTransactions  LedgerTransaction[] @relation("DebitLedger")
}

model LedgerTransaction {
    id               String   @id @default(uuid())
    CreditLedger     Ledger   @relation("CreditLedger", fields: [creditLedgerCode], references: [code])
    DebitLedger      Ledger   @relation("DebitLedger", fields: [debitLedgerCode], references: [code])
    creditLedgerCode String
    debitLedgerCode  String
    date             DateTime @default(now())
    amountInCents    Int

    accountTransactionId String? @unique

    AccountTrasaction AccountTransaction? @relation(fields: [accountTransactionId], references: [id])
}
