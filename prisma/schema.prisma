generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgresql://marcus:password@localhost:5432/svelte-billing"
}

// Define the Skater table
model Skater {
    id          String         @id @default(uuid())
    firstName   String
    lastName    String
    email       String
    dateOfBirth DateTime?
    createdOn   DateTime       @default(now())
    modifiedOn  DateTime?
    lessons     SkaterLesson[]
    invoices    Invoice[]

    @@unique([firstName, lastName])
}

model Role {
    name     String     @id @unique
    UserRole UserRole[]
}

// Define the User table
model User {
    id        String     @id @default(uuid())
    email     String     @unique
    firstName String?
    lastName  String?
    roles     UserRole[]
    Coach     Coach?
}

model UserRole {
    user     User   @relation(fields: [userId], references: [id])
    userId   String
    role     Role   @relation(fields: [roleName], references: [name])
    roleName String

    @@id([userId, roleName])
}

model Coach {
    id                String   @id @default(uuid())
    hourlyRateInCents Int
    user              User     @relation(fields: [userId], references: [id])
    userId            String   @unique
    lessons           Lesson[]
}

model Lesson {
    id                         String         @id @default(uuid())
    lessonTimeInMinutes        Int
    lessonCostInCents          Int
    lessonCostPerSkaterInCents Int
    date                       DateTime
    createdOn                  DateTime       @default(now())
    modifiedOn                 DateTime?
    coach                      Coach          @relation(fields: [coachId], references: [id])
    coachId                    String
    skaters                    SkaterLesson[]
}

model Invoice {
    id             String         @id @default(uuid())
    invoiceDate    DateTime
    skater         Skater         @relation(fields: [skaterId], references: [id])
    skaterId       String
    skaterLessons  SkaterLesson[]
    createdOn      DateTime       @default(now())
    modifiedOn     DateTime?
    InvoiceBatch   InvoiceBatch?  @relation(fields: [invoiceBatchId], references: [id])
    invoiceBatchId String?
}

model InvoiceBatch {
    id        String    @id @default(uuid())
    invoices  Invoice[]
    createdOn DateTime  @default(now())
}

model SkaterLesson {
    Skater    Skater   @relation(fields: [skaterId], references: [id])
    skaterId  String
    Lesson    Lesson   @relation(fields: [lessonId], references: [id])
    lessonId  String
    Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
    invoiceId String?

    @@id([skaterId, lessonId])
}

// Double Entry Bookkeeping 

enum TransactionType {
    Credit
    Debit
}

model AccountType {
    code    String    @id
    Account Account[]
}

model Account {
    id                 Int                  @id @default(autoincrement())
    accountType        AccountType          @relation(fields: [accountTypeCode], references: [code])
    accountTypeCode    String
    name               String
    AccountTransaction AccountTransaction[]
}

enum AccountTransactionType {
    SkaterInvoice
    SkaterPayment
    CoachOwe
    CoachPay
}

model Ledger {
    code               String               @id
    name               String
    AccountTransaction AccountTransaction[]
    CreditTransactions LedgerTransaction[]  @relation("CreditLedger")
    DebitTransactions  LedgerTransaction[]  @relation("DebitLedger")
}

model AccountTransaction {
    ledgerCode    String
    accountId     Int
    date          DateTime
    amountInCents Int

    transactionType        TransactionType
    accountTransactionType AccountTransactionType

    ledger  Ledger  @relation(fields: [ledgerCode], references: [code])
    account Account @relation(fields: [accountId], references: [id])

    @@id([ledgerCode, accountId, date])
}

model LedgerTransaction {
    creditLedger     Ledger   @relation("CreditLedger", fields: [creditLedgerCode], references: [code])
    debitLedger      Ledger   @relation("DebitLedger", fields: [debitLedgerCode], references: [code])
    creditLedgerCode String
    debitLedgerCode  String
    date             DateTime
    amountInCents    Int

    @@id([creditLedgerCode, debitLedgerCode, date])
}
